
menu_home = Home
menu_download = Download
menu_documentation = Documentation
menu_faq = FAQ

seo_keywords = erlang, web, framework, mvc, django, rails
seo_description = Beepbeep is a microframework that doesn\u2019t get in your way. BeepBeep is a simple Web Application framework for Erlang inspired by Rails and Merb, with Django sprinkled on top

framework_slogan = Beepbeep is a microframework \n\
	that doesn\u2019t get in your way
buzzwords_to_get_started = Buzzwords to get you started
fast = Fast\!
dtl = Django template language
q_a_microframework = A microframework?
description_microframework = Unlike many other frameworks which bind you to a "one true way" of doing things (by including database bindings, javascript libraries etc.), BeepBeep only binds you to MVC and MochiWeb (also see <a href\="/en-US/documentation/roadmap/">roadmap</a>).\n\
	\n\
	You're totally free to decide what database binding to choose or what javascript library to use\n\
	\n\
	BeepBeep won't get in your way
q_how_it_works = So how do you say it works?
description_how_it_works = Before getting into the gory technical details you should really <a href\="/en-US/documentation/get-started/">try it out</a>\n\
	\n\
	After that you're welcome to see both the <a href\="/en-US/documentation/innards/">implementation details</a> and the <a href\="/en-US/documentation/roadmap/">roadmap</a>
q_anyone_using = Anyone using it?
description_anyone_using = BeepBeep is a very young framework, so not many sites are actually using it. Yet.\n\
	\n\
	This very site is running on top of BeepBeep\n\
	\n\
	If you use BeepBeep, <a href\="/en-US/contact/">give us a shout\!</a>
q_tutorials = Tutorials/Get started
tutorials_description = There is a section on how to get started in <a href\="/en-US/documentation/get-started">documentation</a>\n\
	\n\
	See also <a href\="http\://lethain.com/tags/beepbeep/">tutorials by Will Larson</a>&nbsp;<a href\="http\://lethain.com/feeds/series/intro-to-beepbeep/"><img src\="/img/rss-14x14.png" alt\="tutorials by Will Larson" /></a>
header_get_it = Get it\:
link_on_github = <a href\="http\://github.com/dmitriid/beepbeep/network">on GitHub</a>
header_learn_more = Learn more
link_documentation = Documentation
link_roadmap = Roadmap
link_faq = FAQ
download_instructions = Download instructions
welcome = Welcome

stable_versions = Stable versions
current_version = BeepBeep is currently at version
get_it_here = You can get it here\:
development_version = Development version
get_development_version = You can grab the latest development version from either of these github forks (mind the latest merge date though)
fork_dave_byrson = Dave Byrson's fork
fork_dmitrii_dimandt = Dmitrii Dimandt's fork
get_development_snapshot = Like living on the edge? Try one of the following to get the latest development snapshot\:
then_get_started = And then <a href\="/en-US/documentation/get-started/">get started</a>\!

overview = Overview
get_started = Get started
working_with_beepbeep = Working with BeepBeep
hooks = Hooks
technical_info = Technical info
how_stuff_works = How stuff works
roadmap = Roadmap
faq = FAQ

overview_description = BeepBeep a simple web application for Erlang\n\
	\n\
	BeepBeep is a simple Web Application framework for Erlang inspired by Rails and Merb. It follows the principle of convention over configuration - meaning if you follow the code structure layout and a few rules when building your app, it'll require no extra work on you behalf to map Url requests to your Controllers and Views.\n\
	\n\
	BeepBeep is built on <a href\="http\://code.google.com/p/mochiweb/">MochiWeb</a> and <a href\="http\://code.google.com/p/erlydtl">ErlyDTL</a>, providing a super fast web server and the ability to define your templates with the Django template language.
features = Features
feature_script = A <a href\="/en-US/documentation/get-started/">script</a> to generate a new web application (based on mochiweb's approach)
feature_session = Session Server to store your application state
feature_filters = <a href\="/en-US/documntation/hooks/">Filters and hooks</a> in your controllers and application for things like authentication, caching, fine-grained control of rendering etc.
feature_dtl = <a href\="/en-US/documentation/erlydtl">Django templates for the view</a>

download_code = download the code
cd_to_directory = cd into the beepbeep directory
run_make = run make
generate_app = generate a new web application by running
your_app_name = YourAppName
destination_dir = DestinationDirectory
this_generates_app = This will create a web app with everything you need. It includes a Sample controller (main_controller.erl).
to_run_the_sample = To run the sample\:
cd_to_app_dir = cd into the new application\u2019s directory you created above
compile_app = Run make to compile the new project
start_server = Start the server\:
visit_sample_site = Open a browser and visit
primer_write_controller = You write a controller with a set of methods that look like this\:
where = where
primer_what_is_action = Action is a string that will match to the request in the Url
primer_what_is_params = Params is an Array of optional parameters that will be passed to variables in your controller.
primer_mapping = BeepBeep will automatically map Url requests to controller and functions (or actions). For example a request to <code>\u201D/hello/show\u201D</code> would map to the <code>hello_controller</code> and invoke the <code>handle_request("show",[])</code> function.
primer_example = Here\u2019s an example\:
maps_to = Maps to
callback_filter_hook = Callback filter hook
primer_return_view = From <code>handle_request</code> we return a tuple that tells the framework what view to use. Views are located in the views directory.
primer_use_view = In our example we\u2019ll use the view located in the subdirectory <code>hello</code> and the file <code>show.html</code>
primer_view_example = Here\u2019s an example of the \u201Cshow.html\u201D template\:
primer_view_example_result = Which will result in\:
primer_view_explanation = The \u201Cname\u201D key set in the controller is passed to the template and expanded using the Django format via erlyDTL.
primer_separation = This approach provides a clean separation of the erlang logic in the controller and the html code in the template.
primer_hooks = You can also implement the <code>before_filter</code> to check requests before the matching <code>handle_request</code> is called.\n\
	\t\t\t\t\t\n\
	Filters that pass should simply return the atom ok, otherwise they should return one of the request responses such as <code>&\#123;render\u2026}</code> or <code>&\#123;redirect\u2026}</code>. \n\
	\n\
	See also the section on <a href\="/en-US/documentation/hooks">hooks</a>.
how_it_works = How it works

faq_title = Assorted collection of FAQs
faq_to_be_filled = To be filled with FAQ as soon as we get some
faq_toc = FAQ TOC

workflow_intro = BeepBeep processes all incoming requests according to the workflow below
things_are_not_scary = Even though things look scary, they are very straightforward. Here goes\:
request_into_app = Request is forwarded by MochiWeb into your app (<code>app_web</code>)
app_web_loop = This request is intercepted by the <code>loop/1</code> function of your <code>*_web</code> module. If you are crazy enough, you can do some low-level preprocessing in this function before handling control over to BeepBeep (this may be useful if you want to mix <a href\="http\://bitbucket.org/justin/webmachine/">WebMachine</a> with BeepBeep)
beepbeep_loop = Control is handled over to <code>beepbeep\:loop/1</code> function. This function sets up the initial environment variable (<code>Env</code>) that will be used throughout the entire application. This variable holds various data, such as passed parameters, paths to modules, session variables etc. This is what a typical <code>Env</code> variable looks like\:
call_to_dispatch = <code>beepbeep\:loop/1</code> calls <code>beepbeep\:dispatch/1</code> which handles the "magic" and returns either a rendered page or various status codes and redirects
env_is_passed_on = The <code>Env</code> variable is passed to controllers and hooks
app_web_preprocess = First, <code>beepbeep\:dispatch/2</code> will try to call <code>app_web\:preprocess/1</code>the, where <code>app_web</code> is you application's *_web.erl module.\n\
	\n\
	The <code>app_web\:preprocess/1</code> method may modify the Env variable that's passed to it and return either a new environment variable or a <code>{redirect, Path}</code> tuple that will instruct BeepBeep to redirect to a different page
get_controller = We then check to see if we have a controller that corresponds to the requested path. Note that controller names are deduced from module names. If no such name is found, we assume the request was made for a static file and return that
app_web_before_filter = Before the method is called, we try <code>app_web\:before_filter/1</code>. This is the method where you can place site-wide authentication logic, for instance. The filter should return either <code>ok</code> or a response tuple (see the graph).
controller_before_filter = Before the method is called, we try <code>controller\:before_filter/0</code>. This is the method where you can place controller-wide logic. The filter should return either <code>ok</code> or a response tuple (see the graph).
controller_before_render = In case the controller returns a <code>{render...</code> tuple, before the actual rendering of the page BeepBeep calls the controller's <code>before_render/1</code> filter. The filter should return a new <code>{render...</code> tuple, but can also return any other response tuple. This is useful if you want to provide controller-specific output for every function within the controller
app_web_before_render = In case the controller returns a <code>{render...</code> tuple, before the actual rendering of the page BeepBeep calls the app's <code>app_web\:before_render/2</code> filter. The filter should return a new <code>{render...</code> tuple, but can also return any other response tuple. This is useful if you want to provide application-wide output (such as main menu)
controller_action = After all the filters are passed BeepBeep calls the coresponding controller's <code>handle_request/2</code> method. In case such a method exists, it should return one of the response tuples
the_end = After all this the view is finally compiled and sent to the browser

hooks_overview_title = A bird's view
hooks_overview = When BeepBeep handles a request, it passes through the followig procedure\:
hooks_overview_2 = That is, request and response pass through\:
where_app_web = where <code>app_web</code> is you application's *_web.erl module.
hooks_detailed = Detailed info
environment_variable = Environment variable
params = Arguments
hook_app_web_preprocess = This filter is useful when you need some low-level preprocessing on passed arguments before htey ever reach the application itself.\n\
	\n\
	For example, you may want to turn all links of type <code>http\://site/controller/action</code> into <code>http\://site/locale/controller/actions</code> where locale is <code>ru-RU</code>, <code>en-US</code> etc.\n\
	\n\
	To do so, you could define <code>preprocess</code> as\:
returns = Returns
render_state = Render State
render_state_description = For all hooks below RenderState means one of the following tuples\:
new_controller = NewController
new_controller_description = For all hooks below NewController means one of the following tuples\:
hook_app_web_before_filter = Called before any method call. Useful when implementing site-wide authentication\:
hook_controller_before_filter = Called before any other method within  the controller. Can be used, as in the following example, to transition from older version of the site to the new version\:\n\
	\n\
	Old version\: http\://site/news/item/id\n\
	New version\: http\://site/news/show/title
hook_controller_before_render = Called before page is rendered. Useful if you have a common subtemplate for this specific controller and would like to pass a common set of data into it. For eaxmple, this site has a TOC on all documentation pages and passes translated strings into it\:

for_now_refer_to_erlydtl_docs = For now, refer to ErlyDTL docs\:

this_is_a_tentative_roadmap = This is a tentative roadmap and is subject to change
options_to_beepbeep = Allow control over BeepBeep via options (change location of certain hooks, like <code>preprocess</code>, options to ErlyDTL etc.)
erlydtl_changes = Possibly make changes to ErlyDTL based on the following issues\:
webmachine_integration = Possible integration with WebMachine
yaws_integration = Possible integration with Yaws
pluggable_template_engines = Pluggable template engines (StringTemplate, erltl) (possibly as middleware, see below)
better_error_handling_customization = Better error handling, cutomization of error output
hook_app_web_before_render = Called before page is rendered. Useful if you have a common subtemplate for the entire site and would like to pass a common set of data into it. For eaxmple, this site has a main menu on all pages and passes translated strings into it\:
django_middleware = Implementation of Django-like middleware layer. See <a href\="http\://docs.djangoproject.com/en/dev/topics/http/middleware/">http\://docs.djangoproject.com/en/dev/topics/http/middleware/</a>
ewgi = Interface to/compatibility with ewgi, <a href\="http\://github.com/skarab/ewgi/">http\://github.com/skarab/ewgi/</a>

contact = Give us a shout\!
name = Name
site = Site
email = Email
text = Your thoughts
submit = Submit

email_sent = Your email has been successfully sent. Thank you
